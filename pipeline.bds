#required inputs
string reference_sequences = "data/Triticum_aestivum.TGACv1.dna.toplevel.fa";
string reference_sequences_chromosomal = "output/Triticum_aestivum.TGACv1.dna.toplevel.fa";
string reference_annotations = "data/Triticum_aestivum.TGACv1.37.gff3";
string reference_annotations_clean = "data/Triticum_aestivum.TGACv1.37.clean.gff3";
string tae = "data/TAE.fa.filtered.21.nodups"

string tae_allhits = "output/tae_dna.allhits.csv"
string ann_genes = "output/genes.gff3";
string gene_sequences = "output/genes_sequences.fasta"
string cmd = "";

#clean gff3 file for pandas
cmd = "cat " + reference_annotations + " |  sed '/^#/ d' > " + reference_annotations_clean
stage("clean reference annotations ",cmd);

#only genes in gff
cmd = "cat " + reference_annotations_clean + " |  grep gene > " + ann_genes
stage("filter gff to genes ",cmd);

#remove some ids from reference sequence
cmd = "python scripts/fasomerecords.py -s " + reference_sequences;
cmd += " -e Pt -e Mt -o " + reference_sequences_chromosomal + "";
stage("clean reference annotations ",cmd);

#extract genes sequences from reference and annotations +- 100
cmd =  "python scripts/ann2fasta.py -s " + reference_sequences_chromosomal;
cmd += " -a " + ann_genes;
cmd += " -f gene ";
cmd += " -w 150 ";
cmd += " -o " + gene_sequences;
stage("all sequences to genes sequences",cmd);

#makeblastdb dna
cmd = "makeblastdb -dbtype 'nucl' -in " + gene_sequences + " -out " + gene_sequences + ".db"
stage("makeblastdb for gene sequences", cmd);

#map miRNA sequences into genes sequences
cmd =  "blastn -word_size 21 ";
cmd += "-task blastn-short -query " + tae;
cmd += " -db " + gene_sequences; 
cmd += ".db -ungapped -penalty -1 -reward 1 -outfmt 6"; 
cmd += " -out " + tae_allhits;
stage("TAE vs GENE_sequences",cmd)

#validate miRNA secondary structure

#extract valid miRNA sequences

#cleavage of targets

#helper functions
void stage(string name, string cmd) {
  print "Stage: " + name + "\n";
  print "Command: " + cmd + "\n";
  sys $cmd;
}
